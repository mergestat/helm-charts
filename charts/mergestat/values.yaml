worker:
  replicaCount: 1
  image:
    repository: mergestat/worker
    pullPolicy: Always
  env:
    - name: POSTGRES_CONNECTION
      value: postgres://postgres:password@mergestat-postgresql:5432/postgres?sslmode=disable
    - name: CONCURRENCY
      value: "3"
    - name: ENCRYPTION_SECRET
      value: some-secret-string
  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources: {}
  securityContext: {}
  podSecurityContext: {}
  podAnnotations: {}
  volumeMounts: []
  volumes: []
  pvc:
    enabled: false
    annotations: {}
      ## Example usage for github.com/topolvm/pvc-autoresizer
      # resize.topolvm.io/storage_limit: 2Ti
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 20Gi

graphql:
  replicaCount: 1
  image:
    repository: mergestat/graphql
    pullPolicy: Always
  env:
    - name: POSTGRES_CONNECTION
      value: postgres://postgres:password@mergestat-postgresql:5432/postgres?sslmode=disable
    - name: JWT_SECRET
      value: some-secret-string
  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources: {}
  securityContext: {}
  podSecurityContext: {}
  podAnnotations: {}

ui:
  replicaCount: 1
  image:
    repository: mergestat/console
    pullPolicy: Always
  env:
    - name: POSTGRAPHILE_API
      value: http://mergestat-graphql:5433/graphql
    - name: POSTGRES_CONNECTION
      value: postgres://postgres:password@mergestat-postgresql:5432/postgres?sslmode=disable
    - name: JWT_SECRET
      value: some-secret-string
  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources: {}
  securityContext: {}
  podSecurityContext: {}
  podAnnotations: {}
  service:
    type: ClusterIP
    annotations: {}

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

postgresql:
# https://github.com/bitnami/charts/tree/master/bitnami/postgresql
  enabled: true
  auth:
    ## @param auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` with key `postgres-password` is provided
    postgresPassword: "password"
    ## @param auth.username Name for a custom user to create
    username: ""
    ## @param auth.password Password for the custom user to create. Ignored if `auth.existingSecret` with key `password` is provided
    password: ""
    ## @param auth.database Name for a custom database to create
    database: ""
    ## @param auth.replicationUsername Name of the replication user
    existingSecret: ""
    ## @param auth.existingSecret Name of existing secret to use for PostgreSQL credentials. The secret must contain the keys `postgres-password` (which is the password for "postgres" admin user), `password` (which is the password for the custom user to create when `auth.username` is set) and `replication-password` (which is the password for replication user). `auth.postgresPassword`, `auth.password`, and `auth.replicationPassword` will be ignored and picked up from this secret. The secret might also contains the key `ldap-password` if LDAP is enabled. `ldap.bind_password` will be ignored and picked from this secret in this case.
    ## The value is evaluated as a template.
